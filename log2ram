#!/usr/bin/env sh

. /etc/log2ram.conf

HDD_LOG=/var/hdd.log
RAM_LOG=/var/log

LOG_NAME="log2ram.log"
LOG2RAM_LOG="${RAM_LOG}/${LOG_NAME}"
LOG_OUTPUT="tee -a $LOG2RAM_LOG"

isSafe () {
    [ -d $HDD_LOG/ ] || echo "ERROR: $HDD_LOG/ doesn't exist! Can't sync."
    [ -d $HDD_LOG/ ] || exit 1
}

syncToDisk () {
    isSafe

    if [ "$USE_RSYNC" = true ]; then
        rsync -aXWv --delete --links $RAM_LOG/ $HDD_LOG/ 2>&1 | $LOG_OUTPUT
    else
        cp -rfup $RAM_LOG/ -T $HDD_LOG/ 2>&1 | $LOG_OUTPUT
    fi
}

syncFromDisk () {
    isSafe

    if [ ! -z "$(du -sh -t "$LOG_MEM_LIMIT" $HDD_LOG/ | cut -f1)" ]; then
        echo "ERROR: RAM disk too small. Can't sync."
        umount -l $RAM_LOG/
        umount -l $HDD_LOG/
        if [ "$MAIL" = true ]; then
            echo "LOG2RAM : No place on RAM anymore, fallback on the disk" | mail -s 'Log2Ram Error' root;
        fi
        exit 1
    fi

    if [ "$USE_RSYNC" = true ]; then
        rsync -aXWv --delete --links $HDD_LOG/ $RAM_LOG/ 2>&1 | $LOG_OUTPUT
    else
        cp -rfup $HDD_LOG/ -T $RAM_LOG/ 2>&1 | $LOG_OUTPUT
    fi
}

wait_for () {
    while ! grep -qs "$1" /proc/mounts; do
        sleep 0.1
    done
}

createZramLogDrive () {
	# Check Zram Class created
	ZRAM_SYS_DIR='/sys/class/zram-control'
	if [ ! -d "${ZRAM_SYS_DIR}" ]; then
        	modprobe zram
		RAM_DEV='0'
	else
        	RAM_DEV=$(cat /sys/class/zram-control/hot_add)
	fi
	echo ${COMP_ALG_LOG} > /sys/block/zram${RAM_DEV}/comp_algorithm
	echo ${LOG_DRIVE_SIZE} > /sys/block/zram${RAM_DEV}/disksize
	echo ${LOG_MEM_LIMIT} > /sys/block/zram${RAM_DEV}/mem_limit
	mke2fs -t ext4 -O ^has_journal,extent,^uninit_bg /dev/zram${RAM_DEV}
	tune2fs -o journal_data_writeback  /dev/zram${RAM_DEV}
}

createZramSwaps () {
	totalmem=$(free|awk '/^Mem:/{print $2}')
	mem=$((( totalmem * MEM_FACTOR / 100 / SWAP_DEVICES ) * 1024 ))
	drive_size=$((( mem * SWAP_DRIVE_FACTOR ) /100 ))
	# Check Zram Class created
	ZRAM_SYS_DIR='/sys/class/zram-control'
	if [ ! -d "${ZRAM_SYS_DIR}" ]; then
        	modprobe zram
        	RAM_DEV='0'
		echo ${COMP_ALG_SWAP} > /sys/block/zram${RAM_DEV}/comp_algorithm
		echo ${drive_size} > /sys/block/zram${RAM_DEV}/disksize
		echo ${mem} > /sys/block/zram${RAM_DEV}/mem_limit
		mkswap /dev/zram${RAM_DEV}
		swapon -p ${SWAP_PRI} /dev/zram${RAM_DEV}
	else
        	RAM_DEV=$(cat /sys/class/zram-control/hot_add)
		echo ${COMP_ALG_SWAP} > /sys/block/zram${RAM_DEV}/comp_algorithm
		echo ${drive_size} > /sys/block/zram${RAM_DEV}/disksize
		echo ${mem} > /sys/block/zram${RAM_DEV}/mem_limit
		mkswap /dev/zram${RAM_DEV}
		swapon -p ${SWAP_PRI} /dev/zram${RAM_DEV}
	fi
	# Enable page-cluster tweak 0 pages=1
	if [ "${EPCT}" = true ]; then
		echo '0' > /proc/sys/vm/page-cluster
	fi 
	if [ "$SWAP_DEVICES" -gt 1 ];then
		for i in $(seq $((SWAP_DEVICES - 1))); do
			RAM_DEV=$(cat /sys/class/zram-control/hot_add)
			echo ${COMP_ALG_SWAP} > /sys/block/zram${RAM_DEV}/comp_algorithm
			echo ${drive_size} > /sys/block/zram${RAM_DEV}/disksize
			echo ${mem} > /sys/block/zram${RAM_DEV}/mem_limit
			mkswap /dev/zram${RAM_DEV}
			swapon -p ${SWAP_PRI} /dev/zram${RAM_DEV}
		done
	fi
}

case "$1" in
  start)
      [ -d $HDD_LOG/ ] || mkdir $HDD_LOG/
      mount --bind $RAM_LOG/ $HDD_LOG/
      mount --make-private $HDD_LOG/
      if [ "$ZL2R" = true ]; then
	createZramLogDrive
      fi
      wait_for $HDD_LOG
      if [ "$ZL2R" = true ]; then
	mount -t ext4 -o nosuid,discard,noexec,nodev,user=log2ram,data=writeback,noatime,nodiratime /dev/zram${RAM_DEV} ${RAM_LOG}/
	#mount -t ext3 -o user=log2ram /dev/zram${RAM_DEV} ${RAM_LOG}/

      else
	mount -t tmpfs -o nosuid,noexec,nodev,mode=0755,size="$LOG_MEM_LIMIT" log2ram $RAM_LOG/
      fi
      if [ "$SWAP_DEVICES" -gt 0 ];then
	createZramSwaps
      fi
      wait_for $RAM_LOG
      syncFromDisk
      ;;

  stop)
      syncToDisk
      umount -l $RAM_LOG/
      umount -l $HDD_LOG/
      if [ "$ZL2R" = true ]; then
	if [ "$SWAP_DEVICES" -eq 0 ];then
		rmod zram
	fi
      fi
      if [ "$SWAP_DEVICES" -gt 0 ];then
      	if DEVICES=$(grep zram /proc/swaps | awk '{print $1}'); then
		for i in $DEVICES; do
			swapoff $i
		done
	fi
	rmmod zram
      fi
      ;;

  write)
      syncToDisk
      ;;

  *)
      echo "Usage: log2ram {start|stop|write}" >&2
      exit 1
      ;;
esac
